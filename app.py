"""
3D Printer Cost Calculator - Streamlit Application
A comprehensive tool for calculating 3D printing costs with GCODE parsing and profile management.
"""
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from io import StringIO
import json
from datetime import timedelta

# Import custom modules
from models import (
    ParsedGcode, PrinterProfile, MaterialProfile, 
    CostCalculationInput, CostBreakdown
)
from gcode_parsers import GcodeParserFactory
from cost_calculator import CostCalculationEngine
from utils import (
    ProfileManager, DataExporter, ValidationUtils, 
    FormatUtils, get_default_printer_profiles, get_default_material_profiles
)
from database import db_manager

# Page configuration
st.set_page_config(
    page_title="3D Printer Cost Calculator",
    page_icon="⚙️",
    layout="wide",
    initial_sidebar_state="expanded"
)

def initialize_session_state():
    """Initialize session state variables."""
    if 'gcode_data' not in st.session_state:
        st.session_state.gcode_data = None
    if 'cost_breakdown' not in st.session_state:
        st.session_state.cost_breakdown = None
    if 'batch_results' not in st.session_state:
        st.session_state.batch_results = {}
    
    # Initialize database (with fallback)
    if 'db_initialized' not in st.session_state:
        try:
            if db_manager.init_db():
                st.session_state.db_initialized = True
            else:
                st.session_state.db_initialized = False
        except Exception as e:
            st.session_state.db_initialized = False

def load_default_profiles():
    """Load default profiles if none exist."""
    if not ProfileManager.get_printer_profile_names():
        for profile in get_default_printer_profiles():
            ProfileManager.save_printer_profile(profile)
    
    if not ProfileManager.get_material_profile_names():
        for profile in get_default_material_profiles():
            ProfileManager.save_material_profile(profile)

def sidebar_navigation():
    """Create sidebar navigation."""
    st.sidebar.title("3D Print Cost Calculator")
    
    pages = [
        "Calculate Cost",
        "Batch Processing", 
        "Manage Profiles",
        "Analytics",
        "Export Data"
    ]
    
    selected_page = st.sidebar.radio(
        "Navigation",
        pages
    )
    
    return selected_page

def upload_gcode_file():
    """Handle GCODE file upload and parsing."""
    st.subheader("Upload GCODE File")
    
    uploaded_file = st.file_uploader(
        "Choose a GCODE file",
        type=['gcode', 'txt'],
        help="Upload a GCODE file generated by your slicer software"
    )
    
    if uploaded_file is not None:
        try:
            # Read file content
            file_content = uploaded_file.read().decode('utf-8')
            
            # Validate GCODE
            is_valid, message = ValidationUtils.validate_gcode_file(file_content)
            if not is_valid:
                st.error(f"Invalid GCODE file: {message}")
                return None
            
            # Parse GCODE
            with st.spinner("Parsing GCODE file..."):
                parser_factory = GcodeParserFactory()
                gcode_data = parser_factory.parse_gcode(file_content, uploaded_file.name)
            
            st.success(f"Successfully parsed GCODE file using {gcode_data.slicer_name} parser")
            
            # Display parsed information
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Print Time", FormatUtils.format_duration(gcode_data.estimated_print_time))
                st.metric("Filament Weight", FormatUtils.format_weight(gcode_data.filament_used_grams))
            
            with col2:
                st.metric("Layer Count", f"{gcode_data.layer_count:,}")
                st.metric("Max Z Height", FormatUtils.format_length(gcode_data.max_z_height))
            
            with col3:
                if gcode_data.nozzle_temperature:
                    st.metric("Nozzle Temp", f"{gcode_data.nozzle_temperature:.0f}°C")
                if gcode_data.bed_temperature:
                    st.metric("Bed Temp", f"{gcode_data.bed_temperature:.0f}°C")
            
            return gcode_data
            
        except Exception as e:
            st.error(f"Error parsing GCODE file: {str(e)}")
            return None
    
    return None

def cost_input_form():
    """Create cost input form."""
    st.subheader("Cost Parameters")
    
    # Profile selection
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Printer Profile**")
        printer_profiles = ProfileManager.get_printer_profile_names()
        selected_printer = st.selectbox(
            "Select printer profile",
            ["Manual Entry"] + printer_profiles,
            help="Choose a saved printer profile or enter values manually"
        )
        
        if selected_printer != "Manual Entry":
            printer_profile = ProfileManager.load_printer_profile(selected_printer)
            printer_power = st.number_input(
                "Printer Power (Watts)", 
                value=float(printer_profile.power_consumption_watts),
                min_value=0.0,
                step=10.0
            )
            printer_cost = st.number_input(
                "Printer Cost ($)", 
                value=float(printer_profile.purchase_cost),
                min_value=0.0,
                step=50.0
            )
            printer_lifetime = st.number_input(
                "Printer Lifetime (hours)", 
                value=float(printer_profile.lifetime_hours),
                min_value=100.0,
                step=100.0
            )
        else:
            printer_power = st.number_input("Printer Power (Watts)", value=200.0, min_value=0.0, step=10.0)
            printer_cost = st.number_input("Printer Cost ($)", value=300.0, min_value=0.0, step=50.0)
            printer_lifetime = st.number_input("Printer Lifetime (hours)", value=5000.0, min_value=100.0, step=100.0)
    
    with col2:
        st.write("**Material Profile**")
        material_profiles = ProfileManager.get_material_profile_names()
        selected_material = st.selectbox(
            "Select material profile",
            ["Manual Entry"] + material_profiles,
            help="Choose a saved material profile or enter values manually"
        )
        
        if selected_material != "Manual Entry":
            material_profile = ProfileManager.load_material_profile(selected_material)
            filament_price = st.number_input(
                "Filament Price ($/kg)", 
                value=float(material_profile.price_per_kg),
                min_value=0.0,
                step=1.0
            )
        else:
            filament_price = st.number_input("Filament Price ($/kg)", value=25.0, min_value=0.0, step=1.0)
        
        electricity_price = st.number_input(
            "Electricity Price ($/kWh)", 
            value=0.12, 
            min_value=0.0, 
            step=0.01,
            format="%.3f"
        )
    
    # Advanced options
    with st.expander("Advanced Options"):
        col1, col2 = st.columns(2)
        
        with col1:
            setup_time = st.number_input(
                "Setup Time (hours)", 
                value=0.25, 
                min_value=0.0, 
                step=0.25,
                help="Time spent setting up the print"
            )
            labor_rate = st.number_input(
                "Labor Rate ($/hour)", 
                value=0.0, 
                min_value=0.0, 
                step=5.0,
                help="Hourly rate for labor costs"
            )
        
        with col2:
            failure_rate = st.slider(
                "Failure Rate (%)", 
                min_value=0.0, 
                max_value=50.0, 
                value=5.0, 
                step=1.0,
                help="Percentage of prints that fail and need reprinting"
            )
            profit_margin = st.slider(
                "Profit Margin (%)", 
                min_value=0.0, 
                max_value=100.0, 
                value=20.0, 
                step=5.0,
                help="Desired profit margin percentage"
            )
    
    return {
        'filament_price_per_kg': filament_price,
        'electricity_price_per_kwh': electricity_price,
        'printer_power_watts': printer_power,
        'printer_cost': printer_cost,
        'printer_lifetime_hours': printer_lifetime,
        'setup_time_hours': setup_time,
        'labor_rate_per_hour': labor_rate,
        'profit_margin_percent': profit_margin,
        'failure_rate_percent': failure_rate
    }

def display_cost_breakdown(cost_breakdown: CostBreakdown):
    """Display cost breakdown with visualizations."""
    st.subheader("Cost Breakdown")
    
    # Cost summary cards
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Total Cost", 
            FormatUtils.format_currency(cost_breakdown.total_cost),
            help="Final total cost including all factors"
        )
    
    with col2:
        st.metric(
            "Material Cost", 
            FormatUtils.format_currency(cost_breakdown.material_cost),
            help=f"{FormatUtils.format_percentage(cost_breakdown.material_percentage)} of total"
        )
    
    with col3:
        st.metric(
            "Cost per Gram", 
            FormatUtils.format_currency(cost_breakdown.cost_per_gram),
            help="Cost efficiency metric"
        )
    
    with col4:
        st.metric(
            "Cost per Hour", 
            FormatUtils.format_currency(cost_breakdown.cost_per_hour),
            help="Time efficiency metric"
        )
    
    # Charts
    col1, col2 = st.columns(2)
    
    with col1:
        # Pie chart for cost breakdown
        costs = [
            cost_breakdown.material_cost,
            cost_breakdown.electricity_cost,
            cost_breakdown.depreciation_cost,
            cost_breakdown.labor_cost
        ]
        labels = ['Material', 'Electricity', 'Depreciation', 'Labor']
        
        # Filter out zero costs
        filtered_costs = []
        filtered_labels = []
        for cost, label in zip(costs, labels):
            if cost > 0:
                filtered_costs.append(cost)
                filtered_labels.append(label)
        
        if filtered_costs:
            fig_pie = px.pie(
                values=filtered_costs,
                names=filtered_labels,
                title="Cost Distribution",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        # Bar chart for detailed breakdown
        breakdown_data = {
            'Category': ['Material', 'Electricity', 'Depreciation', 'Labor', 'Failure Adj.', 'Profit'],
            'Cost': [
                cost_breakdown.material_cost,
                cost_breakdown.electricity_cost,
                cost_breakdown.depreciation_cost,
                cost_breakdown.labor_cost,
                cost_breakdown.failure_adjustment,
                cost_breakdown.profit_margin
            ]
        }
        
        fig_bar = px.bar(
            breakdown_data,
            x='Category',
            y='Cost',
            title="Detailed Cost Breakdown",
            color='Cost',
            color_continuous_scale='viridis'
        )
        fig_bar.update_layout(showlegend=False, xaxis_tickangle=45)
        st.plotly_chart(fig_bar, use_container_width=True)
    
    # Detailed breakdown table
    st.subheader("Detailed Breakdown")
    breakdown_df = pd.DataFrame({
        'Cost Component': [
            'Material Cost',
            'Electricity Cost',
            'Machine Depreciation',
            'Labor Cost',
            'Failure Adjustment',
            'Subtotal',
            'Profit Margin',
            'Total Cost'
        ],
        'Amount ($)': [
            f"{cost_breakdown.material_cost:.2f}",
            f"{cost_breakdown.electricity_cost:.2f}",
            f"{cost_breakdown.depreciation_cost:.2f}",
            f"{cost_breakdown.labor_cost:.2f}",
            f"{cost_breakdown.failure_adjustment:.2f}",
            f"{cost_breakdown.subtotal:.2f}",
            f"{cost_breakdown.profit_margin:.2f}",
            f"{cost_breakdown.total_cost:.2f}"
        ],
        'Percentage (%)': [
            f"{cost_breakdown.material_percentage:.1f}",
            f"{cost_breakdown.electricity_percentage:.1f}",
            f"{cost_breakdown.depreciation_percentage:.1f}",
            f"{cost_breakdown.labor_percentage:.1f}",
            f"{(cost_breakdown.failure_adjustment / cost_breakdown.total_cost * 100):.1f}" if cost_breakdown.total_cost > 0 else "0.0",
            f"{(cost_breakdown.subtotal / cost_breakdown.total_cost * 100):.1f}" if cost_breakdown.total_cost > 0 else "0.0",
            f"{(cost_breakdown.profit_margin / cost_breakdown.total_cost * 100):.1f}" if cost_breakdown.total_cost > 0 else "0.0",
            "100.0"
        ]
    })
    
    st.dataframe(breakdown_df, use_container_width=True, hide_index=True)

def calculate_cost_page():
    """Main cost calculation page."""
    st.title("3D Print Cost Calculator")
    st.write("Upload a GCODE file and configure cost parameters to calculate printing costs.")
    
    # File upload
    gcode_data = upload_gcode_file()
    
    if gcode_data:
        st.session_state.gcode_data = gcode_data
        
        # Cost input form
        cost_params = cost_input_form()
        
        # Calculate button
        if st.button("Calculate Cost", type="primary", use_container_width=True):
            try:
                # Create calculation input
                calc_input = CostCalculationInput(
                    gcode=gcode_data,
                    **cost_params
                )
                
                # Calculate cost
                with st.spinner("Calculating costs..."):
                    cost_breakdown = CostCalculationEngine.calculate_cost(calc_input)
                
                st.session_state.cost_breakdown = cost_breakdown
                
                # Save to database
                if st.session_state.get('db_initialized', False):
                    try:
                        db_manager.save_print_record(
                            gcode_data, 
                            cost_breakdown, 
                            cost_params,
                            None,  # printer_profile_name
                            None   # material_profile_name
                        )
                    except Exception as e:
                        st.warning(f"Cost calculated successfully, but couldn't save to database: {e}")
                
                # Display results
                display_cost_breakdown(cost_breakdown)
                
            except Exception as e:
                st.error(f"Error calculating cost: {str(e)}")
    
    # Display previous results if available
    elif st.session_state.gcode_data and st.session_state.cost_breakdown:
        st.info("Showing previous calculation results. Upload a new file to recalculate.")
        
        # Display GCODE info
        gcode_data = st.session_state.gcode_data
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Print Time", FormatUtils.format_duration(gcode_data.estimated_print_time))
            st.metric("Filament Weight", FormatUtils.format_weight(gcode_data.filament_used_grams))
        
        with col2:
            st.metric("Layer Count", f"{gcode_data.layer_count:,}")
            st.metric("Max Z Height", FormatUtils.format_length(gcode_data.max_z_height))
        
        with col3:
            if gcode_data.nozzle_temperature:
                st.metric("Nozzle Temp", f"{gcode_data.nozzle_temperature:.0f}°C")
            if gcode_data.bed_temperature:
                st.metric("Bed Temp", f"{gcode_data.bed_temperature:.0f}°C")
        
        # Display cost breakdown
        display_cost_breakdown(st.session_state.cost_breakdown)

def batch_processing_page():
    """Batch processing page for multiple GCODE files."""
    st.title("Batch Processing")
    st.write("Upload multiple GCODE files to calculate costs for an entire project.")
    
    # Multiple file upload
    uploaded_files = st.file_uploader(
        "Choose GCODE files",
        type=['gcode', 'txt'],
        accept_multiple_files=True,
        help="Upload multiple GCODE files for batch processing"
    )
    
    if uploaded_files:
        st.success(f"Uploaded {len(uploaded_files)} files")
        
        # Cost parameters (simplified for batch)
        st.subheader("Batch Cost Parameters")
        col1, col2 = st.columns(2)
        
        with col1:
            batch_filament_price = st.number_input("Filament Price ($/kg)", value=25.0, min_value=0.0)
            batch_electricity_price = st.number_input("Electricity Price ($/kWh)", value=0.12, min_value=0.0, format="%.3f")
            batch_printer_power = st.number_input("Printer Power (Watts)", value=200.0, min_value=0.0)
        
        with col2:
            batch_printer_cost = st.number_input("Printer Cost ($)", value=300.0, min_value=0.0)
            batch_printer_lifetime = st.number_input("Printer Lifetime (hours)", value=5000.0, min_value=100.0)
            batch_profit_margin = st.slider("Profit Margin (%)", min_value=0.0, max_value=100.0, value=20.0)
        
        if st.button("Process Batch", type="primary"):
            batch_results = {}
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            parser_factory = GcodeParserFactory()
            
            for i, uploaded_file in enumerate(uploaded_files):
                try:
                    status_text.text(f"Processing {uploaded_file.name}...")
                    
                    # Parse file
                    file_content = uploaded_file.read().decode('utf-8')
                    gcode_data = parser_factory.parse_gcode(file_content, uploaded_file.name)
                    
                    # Calculate cost
                    calc_input = CostCalculationInput(
                        gcode=gcode_data,
                        filament_price_per_kg=batch_filament_price,
                        electricity_price_per_kwh=batch_electricity_price,
                        printer_power_watts=batch_printer_power,
                        printer_cost=batch_printer_cost,
                        printer_lifetime_hours=batch_printer_lifetime,
                        profit_margin_percent=batch_profit_margin,
                        setup_time_hours=0.0,
                        labor_rate_per_hour=0.0,
                        failure_rate_percent=0.0
                    )
                    
                    cost_breakdown = CostCalculationEngine.calculate_cost(calc_input)
                    batch_results[uploaded_file.name] = (gcode_data, cost_breakdown)
                    
                except Exception as e:
                    st.error(f"Error processing {uploaded_file.name}: {str(e)}")
                
                progress_bar.progress((i + 1) / len(uploaded_files))
            
            status_text.text("Batch processing complete!")
            st.session_state.batch_results = batch_results
            
            # Display results
            if batch_results:
                st.subheader("Batch Results")
                
                # Summary metrics
                total_cost = sum(result[1].total_cost for result in batch_results.values())
                total_time = sum(result[0].estimated_print_time.total_seconds() for result in batch_results.values()) / 3600
                total_filament = sum(result[0].filament_used_grams for result in batch_results.values())
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total Cost", FormatUtils.format_currency(total_cost))
                with col2:
                    st.metric("Total Time", f"{total_time:.1f} hours")
                with col3:
                    st.metric("Total Filament", FormatUtils.format_weight(total_filament))
                
                # Results table
                results_data = []
                for filename, (gcode_data, cost_breakdown) in batch_results.items():
                    results_data.append({
                        'File': gcode_data.file_name,
                        'Slicer': gcode_data.slicer_name,
                        'Time': FormatUtils.format_duration(gcode_data.estimated_print_time),
                        'Filament (g)': f"{gcode_data.filament_used_grams:.1f}",
                        'Total Cost': FormatUtils.format_currency(cost_breakdown.total_cost),
                        'Cost/g': FormatUtils.format_currency(cost_breakdown.cost_per_gram)
                    })
                
                results_df = pd.DataFrame(results_data)
                st.dataframe(results_df, use_container_width=True, hide_index=True)

def manage_profiles_page():
    """Profile management page."""
    st.title("Manage Profiles")
    st.write("Create and manage printer and material profiles for quick cost calculations.")
    
    tab1, tab2, tab3 = st.tabs(["Printer Profiles", "Material Profiles", "Import/Export"])
    
    with tab1:
        st.subheader("Printer Profiles")
        
        # Add new printer profile
        with st.expander("Add New Printer Profile"):
            with st.form("new_printer_profile"):
                name = st.text_input("Profile Name", placeholder="e.g., Ender 3 V2")
                power = st.number_input("Power Consumption (Watts)", value=200.0, min_value=0.0)
                cost = st.number_input("Purchase Cost ($)", value=300.0, min_value=0.0)
                lifetime = st.number_input("Lifetime (hours)", value=5000.0, min_value=100.0)
                maintenance = st.number_input("Maintenance Cost ($/hour)", value=0.01, min_value=0.0, format="%.3f")
                description = st.text_area("Description", placeholder="Optional description")
                
                if st.form_submit_button("💾 Save Profile"):
                    if name:
                        profile = PrinterProfile(
                            name=name,
                            power_consumption_watts=power,
                            purchase_cost=cost,
                            lifetime_hours=lifetime,
                            maintenance_cost_per_hour=maintenance,
                            description=description
                        )
                        ProfileManager.save_printer_profile(profile)
                        st.success(f"Saved printer profile: {name}")
                        st.rerun()
                    else:
                        st.error("Profile name is required")
        
        # Display existing profiles
        printer_profiles = ProfileManager.get_printer_profile_names()
        if printer_profiles:
            for profile_name in printer_profiles:
                profile = ProfileManager.load_printer_profile(profile_name)
                
                with st.expander(f"🖨️ {profile_name}"):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.write(f"**Power:** {profile.power_consumption_watts}W")
                        st.write(f"**Cost:** ${profile.purchase_cost:,.0f}")
                        st.write(f"**Lifetime:** {profile.lifetime_hours:,.0f} hours")
                        if profile.description:
                            st.write(f"**Description:** {profile.description}")
                    
                    with col2:
                        if st.button(f"🗑️ Delete", key=f"delete_printer_{profile_name}"):
                            ProfileManager.delete_printer_profile(profile_name)
                            st.success(f"Deleted {profile_name}")
                            st.rerun()
        else:
            st.info("No printer profiles saved. Add some profiles above for quick access.")
    
    with tab2:
        st.subheader("Material Profiles")
        
        # Add new material profile
        with st.expander("➕ Add New Material Profile"):
            with st.form("new_material_profile"):
                name = st.text_input("Profile Name", placeholder="e.g., PLA - Premium")
                price = st.number_input("Price per kg ($)", value=25.0, min_value=0.0)
                density = st.number_input("Density (g/cm³)", value=1.24, min_value=0.1)
                material_type = st.selectbox("Material Type", ["PLA", "PETG", "ABS", "TPU", "ASA", "PC", "Other"])
                description = st.text_area("Description", placeholder="Optional description")
                
                if st.form_submit_button("💾 Save Profile"):
                    if name:
                        profile = MaterialProfile(
                            name=name,
                            price_per_kg=price,
                            density_g_cm3=density,
                            material_type=material_type,
                            description=description
                        )
                        ProfileManager.save_material_profile(profile)
                        st.success(f"Saved material profile: {name}")
                        st.rerun()
                    else:
                        st.error("Profile name is required")
        
        # Display existing profiles
        material_profiles = ProfileManager.get_material_profile_names()
        if material_profiles:
            for profile_name in material_profiles:
                profile = ProfileManager.load_material_profile(profile_name)
                
                with st.expander(f"🧵 {profile_name}"):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.write(f"**Type:** {profile.material_type}")
                        st.write(f"**Price:** ${profile.price_per_kg:.2f}/kg")
                        st.write(f"**Density:** {profile.density_g_cm3:.2f} g/cm³")
                        if profile.description:
                            st.write(f"**Description:** {profile.description}")
                    
                    with col2:
                        if st.button(f"🗑️ Delete", key=f"delete_material_{profile_name}"):
                            ProfileManager.delete_material_profile(profile_name)
                            st.success(f"Deleted {profile_name}")
                            st.rerun()
        else:
            st.info("No material profiles saved. Add some profiles above for quick access.")
    
    with tab3:
        st.subheader("Import/Export Profiles")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Export Profiles**")
            if st.button("📤 Export All Profiles"):
                export_data = ProfileManager.export_profiles()
                json_str = json.dumps(export_data, indent=2)
                
                st.download_button(
                    label="💾 Download profiles.json",
                    data=json_str,
                    file_name="3d_printer_profiles.json",
                    mime="application/json"
                )
        
        with col2:
            st.write("**Import Profiles**")
            uploaded_profiles = st.file_uploader(
                "Choose profiles JSON file",
                type=['json'],
                help="Upload a previously exported profiles file"
            )
            
            if uploaded_profiles is not None:
                try:
                    import_data = json.loads(uploaded_profiles.read().decode('utf-8'))
                    
                    if st.button("📥 Import Profiles"):
                        success = ProfileManager.import_profiles(import_data)
                        if success:
                            st.success("Profiles imported successfully!")
                            st.rerun()
                        else:
                            st.error("Error importing profiles. Please check the file format.")
                            
                except json.JSONDecodeError:
                    st.error("Invalid JSON file. Please upload a valid profiles file.")

def analytics_page():
    """Analytics and visualization page."""
    st.title("📊 Analytics")
    st.write("Analyze your printing costs and performance metrics.")
    
    # Check if we have data to analyze
    if not st.session_state.batch_results and not (st.session_state.gcode_data and st.session_state.cost_breakdown):
        st.info("📋 No calculation data available. Run some cost calculations first to see analytics.")
        return
    
    # Combine single and batch results
    all_results = {}
    
    # Add single calculation if available
    if st.session_state.gcode_data and st.session_state.cost_breakdown:
        all_results["Single Calculation"] = (st.session_state.gcode_data, st.session_state.cost_breakdown)
    
    # Add batch results
    all_results.update(st.session_state.batch_results)
    
    if not all_results:
        st.info("No results to analyze.")
        return
    
    # Analytics tabs
    tab1, tab2, tab3 = st.tabs(["📈 Overview", "💰 Cost Analysis", "⏱️ Time Analysis"])
    
    with tab1:
        st.subheader("Print Overview")
        
        # Summary metrics
        total_prints = len(all_results)
        total_cost = sum(result[1].total_cost for result in all_results.values())
        total_time_hours = sum(result[0].estimated_print_time.total_seconds() for result in all_results.values()) / 3600
        total_filament = sum(result[0].filament_used_grams for result in all_results.values())
        avg_cost_per_print = total_cost / total_prints if total_prints > 0 else 0
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Total Prints", total_prints)
        with col2:
            st.metric("Total Cost", FormatUtils.format_currency(total_cost))
        with col3:
            st.metric("Avg Cost/Print", FormatUtils.format_currency(avg_cost_per_print))
        with col4:
            st.metric("Total Filament", FormatUtils.format_weight(total_filament))
        
        # Print distribution by slicer
        slicer_counts = {}
        for gcode_data, _ in all_results.values():
            slicer = gcode_data.slicer_name
            slicer_counts[slicer] = slicer_counts.get(slicer, 0) + 1
        
        if len(slicer_counts) > 1:
            fig_slicer = px.pie(
                values=list(slicer_counts.values()),
                names=list(slicer_counts.keys()),
                title="Prints by Slicer"
            )
            st.plotly_chart(fig_slicer, use_container_width=True)
    
    with tab2:
        st.subheader("Cost Analysis")
        
        # Cost breakdown comparison
        if len(all_results) > 1:
            cost_data = []
            for filename, (gcode_data, cost_breakdown) in all_results.items():
                cost_data.append({
                    'Print': filename[:20] + "..." if len(filename) > 20 else filename,
                    'Material': cost_breakdown.material_cost,
                    'Electricity': cost_breakdown.electricity_cost,
                    'Depreciation': cost_breakdown.depreciation_cost,
                    'Labor': cost_breakdown.labor_cost,
                    'Total': cost_breakdown.total_cost
                })
            
            cost_df = pd.DataFrame(cost_data)
            
            # Stacked bar chart
            fig_costs = px.bar(
                cost_df,
                x='Print',
                y=['Material', 'Electricity', 'Depreciation', 'Labor'],
                title="Cost Breakdown by Print",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig_costs.update_layout(xaxis_tickangle=45)
            st.plotly_chart(fig_costs, use_container_width=True)
            
            # Cost efficiency scatter plot
            efficiency_data = []
            for filename, (gcode_data, cost_breakdown) in all_results.items():
                efficiency_data.append({
                    'Print': filename,
                    'Weight (g)': gcode_data.filament_used_grams,
                    'Cost per Gram': cost_breakdown.cost_per_gram,
                    'Total Cost': cost_breakdown.total_cost
                })
            
            efficiency_df = pd.DataFrame(efficiency_data)
            
            fig_efficiency = px.scatter(
                efficiency_df,
                x='Weight (g)',
                y='Cost per Gram',
                size='Total Cost',
                hover_data=['Print'],
                title="Cost Efficiency Analysis"
            )
            st.plotly_chart(fig_efficiency, use_container_width=True)
        
        # Average cost breakdown
        avg_material = sum(result[1].material_cost for result in all_results.values()) / len(all_results)
        avg_electricity = sum(result[1].electricity_cost for result in all_results.values()) / len(all_results)
        avg_depreciation = sum(result[1].depreciation_cost for result in all_results.values()) / len(all_results)
        avg_labor = sum(result[1].labor_cost for result in all_results.values()) / len(all_results)
        
        st.subheader("Average Cost Distribution")
        avg_costs = [avg_material, avg_electricity, avg_depreciation, avg_labor]
        avg_labels = ['Material', 'Electricity', 'Depreciation', 'Labor']
        
        # Filter out zero costs
        filtered_avg_costs = []
        filtered_avg_labels = []
        for cost, label in zip(avg_costs, avg_labels):
            if cost > 0:
                filtered_avg_costs.append(cost)
                filtered_avg_labels.append(label)
        
        if filtered_avg_costs:
            fig_avg_pie = px.pie(
                values=filtered_avg_costs,
                names=filtered_avg_labels,
                title="Average Cost Distribution"
            )
            st.plotly_chart(fig_avg_pie, use_container_width=True)
    
    with tab3:
        st.subheader("Time Analysis")
        
        if len(all_results) > 1:
            # Print time comparison
            time_data = []
            for filename, (gcode_data, cost_breakdown) in all_results.items():
                time_hours = gcode_data.estimated_print_time.total_seconds() / 3600
                time_data.append({
                    'Print': filename[:20] + "..." if len(filename) > 20 else filename,
                    'Print Time (hours)': time_hours,
                    'Cost per Hour': cost_breakdown.cost_per_hour,
                    'Total Cost': cost_breakdown.total_cost
                })
            
            time_df = pd.DataFrame(time_data)
            
            # Time vs cost chart
            fig_time = px.scatter(
                time_df,
                x='Print Time (hours)',
                y='Total Cost',
                size='Cost per Hour',
                hover_data=['Print'],
                title="Print Time vs Total Cost"
            )
            st.plotly_chart(fig_time, use_container_width=True)
            
            # Time efficiency chart
            fig_time_eff = px.bar(
                time_df,
                x='Print',
                y='Cost per Hour',
                title="Cost Efficiency by Print Time"
            )
            fig_time_eff.update_layout(xaxis_tickangle=45)
            st.plotly_chart(fig_time_eff, use_container_width=True)
        
        # Time statistics
        print_times = [result[0].estimated_print_time.total_seconds() / 3600 for result in all_results.values()]
        avg_time = sum(print_times) / len(print_times)
        min_time = min(print_times)
        max_time = max(print_times)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Average Print Time", f"{avg_time:.1f} hours")
        with col2:
            st.metric("Shortest Print", f"{min_time:.1f} hours")
        with col3:
            st.metric("Longest Print", f"{max_time:.1f} hours")

def export_data_page():
    """Data export page."""
    st.title("📥 Export Data")
    st.write("Export your calculation results and reports.")
    
    # Check for available data
    has_single = st.session_state.gcode_data and st.session_state.cost_breakdown
    has_batch = bool(st.session_state.batch_results)
    
    if not has_single and not has_batch:
        st.info("📋 No calculation data available. Run some cost calculations first to export data.")
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("📊 Single Calculation Export")
        
        if has_single:
            if st.button("📄 Export Single Calculation CSV"):
                csv_data = DataExporter.export_cost_breakdown_csv(
                    st.session_state.gcode_data,
                    st.session_state.cost_breakdown
                )
                
                st.download_button(
                    label="💾 Download Single_Calculation.csv",
                    data=csv_data,
                    file_name=f"3d_print_cost_{st.session_state.gcode_data.file_name}.csv",
                    mime="text/csv"
                )
        else:
            st.info("No single calculation data available.")
    
    with col2:
        st.subheader("📁 Batch Results Export")
        
        if has_batch:
            if st.button("📄 Export Batch Results CSV"):
                csv_data = DataExporter.export_batch_results_csv(st.session_state.batch_results)
                
                st.download_button(
                    label="💾 Download Batch_Results.csv",
                    data=csv_data,
                    file_name="3d_print_batch_costs.csv",
                    mime="text/csv"
                )
        else:
            st.info("No batch calculation data available.")
    
    # Combined export
    if has_single or has_batch:
        st.subheader("📋 Complete Report")
        
        if st.button("📊 Generate Complete Report"):
            # Combine all data
            all_data = []
            
            # Add single calculation
            if has_single:
                single_data = {
                    'Source': 'Single Calculation',
                    'File Name': st.session_state.gcode_data.file_name,
                    'Slicer': st.session_state.gcode_data.slicer_name,
                    'Print Time (hours)': f"{st.session_state.gcode_data.estimated_print_time.total_seconds() / 3600:.2f}",
                    'Filament Used (g)': f"{st.session_state.gcode_data.filament_used_grams:.2f}",
                    'Total Cost ($)': f"{st.session_state.cost_breakdown.total_cost:.2f}",
                    'Material Cost ($)': f"{st.session_state.cost_breakdown.material_cost:.2f}",
                    'Electricity Cost ($)': f"{st.session_state.cost_breakdown.electricity_cost:.2f}",
                    'Depreciation Cost ($)': f"{st.session_state.cost_breakdown.depreciation_cost:.2f}",
                    'Labor Cost ($)': f"{st.session_state.cost_breakdown.labor_cost:.2f}"
                }
                all_data.append(single_data)
            
            # Add batch results
            for filename, (gcode_data, cost_breakdown) in st.session_state.batch_results.items():
                batch_data = {
                    'Source': 'Batch Processing',
                    'File Name': gcode_data.file_name,
                    'Slicer': gcode_data.slicer_name,
                    'Print Time (hours)': f"{gcode_data.estimated_print_time.total_seconds() / 3600:.2f}",
                    'Filament Used (g)': f"{gcode_data.filament_used_grams:.2f}",
                    'Total Cost ($)': f"{cost_breakdown.total_cost:.2f}",
                    'Material Cost ($)': f"{cost_breakdown.material_cost:.2f}",
                    'Electricity Cost ($)': f"{cost_breakdown.electricity_cost:.2f}",
                    'Depreciation Cost ($)': f"{cost_breakdown.depreciation_cost:.2f}",
                    'Labor Cost ($)': f"{cost_breakdown.labor_cost:.2f}"
                }
                all_data.append(batch_data)
            
            combined_df = pd.DataFrame(all_data)
            csv_data = combined_df.to_csv(index=False)
            
            st.download_button(
                label="💾 Download Complete_Report.csv",
                data=csv_data,
                file_name="3d_print_complete_report.csv",
                mime="text/csv"
            )

def main():
    """Main application function."""
    # Initialize session state
    initialize_session_state()
    
    # Load default profiles on first run
    load_default_profiles()
    
    # Navigation
    selected_page = sidebar_navigation()
    
    # Page routing
    if selected_page == "Calculate Cost":
        calculate_cost_page()
    elif selected_page == "Batch Processing":
        batch_processing_page()
    elif selected_page == "Manage Profiles":
        manage_profiles_page()
    elif selected_page == "Analytics":
        analytics_page()
    elif selected_page == "Export Data":
        export_data_page()
    
    # Footer
    st.sidebar.markdown("---")
    st.sidebar.markdown("### 🔗 About")
    st.sidebar.markdown(
        "3D Printer Cost Calculator v1.0\n\n"
        "Comprehensive cost analysis for 3D printing projects with support for "
        "multiple slicer formats and advanced cost modeling."
    )

if __name__ == "__main__":
    main()
