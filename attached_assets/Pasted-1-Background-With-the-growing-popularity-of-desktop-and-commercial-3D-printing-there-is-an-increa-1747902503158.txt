1. Background

With the growing popularity of desktop and commercial 3D printing, there is an increasing need to accurately estimate the true cost of producing prints. Hobbyists, freelancers, and businesses often lack tools that provide transparent and customizable cost calculations. Current slicers offer some estimations, but they typically ignore factors like electricity, machine depreciation, labor, or failure risk.

This application aims to fill that gap by analyzing GCODE files generated by slicers and calculating comprehensive cost breakdowns. It will support granular configuration for materials, machines, and operations, enabling more informed pricing, quoting, and production planning.
2. Requirements
2.1. Must Have

    Parse GCODE files to extract:

    Filament usage (length and weight)

    Estimated print time

    Layer count and height

    Print settings (temperature, speed)

    Cost calculation engine for:

    Material cost (based on filament weight and price)

    Electricity cost (based on printer power and time)

    Machine depreciation cost

    Simple UI to:

    Upload/select GCODE file

    Input material, electricity, and printer cost data

    View cost breakdown

2.2. Should Have

    Failure rate adjustment for risk assessment

    Save/load printer profiles with:

    Power consumption

    Purchase cost

    Maintenance data

    Save/load material profiles with:

    Price per kg

    Density and type

    Project tracking and batch cost calculation

    Folder-based GCODE import:

    Recursively load project folders

    Group cost reports based on folder hierarchy

    Associate metadata (STL, 3MF, hyperlinks, timelapse) with prints

2.3. Could Have

    Visual analytics for:

    Cost breakdowns

    Historical cost tracking

    Comparison of slicer settings

    Client quote generation (PDF/CSV export)

    Profit margin configuration

2.4. Wonâ€™t Have (initially)

    Real-time integration with slicers

    Multi-material/multi-extruder support

3. Method
3.1. Architecture Overview

The application follows a modular client-server design:

    Frontend (Angular): UI for uploading GCODE files/folders, entering cost parameters, viewing cost breakdowns and print metadata.

    Backend (ASP.NET Core): Handles GCODE parsing, cost calculation, profile management, and project/folder processing.

    Parsers: Individual services for handling GCODE from different slicers (Bambu, Orca, Creality).

    Cost Engine: Centralized component that calculates cost from parsed data.

    Project Processor: Recursively analyzes a folder of GCODE files, infers structure and metadata.

    Data Store: Stores printer profiles, materials, projects. Supports SQLite for local or PostgreSQL for hosted deployment.

3.2. Core Components
3.2.1. ParsedGcode Data Model

public class ParsedGcode
{
    public string SlicerName { get; set; }
    public string FileName { get; set; }
    public TimeSpan EstimatedPrintTime { get; set; }
    public float FilamentUsedGrams { get; set; }
    public float FilamentUsedMillimeters { get; set; }
    public float MaxZHeight { get; set; }
    public int LayerCount { get; set; }
    public float? NozzleTemperature { get; set; }
    public float? BedTemperature { get; set; }
    public float? AveragePrintSpeed { get; set; }
    public float ExtrusionVolume { get; set; }
    public Dictionary<string, string> ExtraMetadata { get; set; }
}

3.2.2. Parser Interface

public interface IGcodeParser
{
    bool CanParse(string gcodeContent);
    ParsedGcode Parse(string gcodeContent);
}

3.2.3. Factory Pattern for Parser Selection

public class GcodeParserFactory
{
    private readonly IEnumerable<IGcodeParser> _parsers;

    public GcodeParserFactory(IEnumerable<IGcodeParser> parsers)
    {
        _parsers = parsers;
    }

    public IGcodeParser GetParser(string content)
    {
        return _parsers.FirstOrDefault(p => p.CanParse(content))
            ?? throw new InvalidOperationException("No suitable parser found.");
    }
}

3.2.4. Centralized Parsing Utilities

public static class GcodeParserUtils
{
    public static float? ExtractSingleFloat(string content, string marker) { ... }
    public static TimeSpan? ExtractEstimatedTime(string content) { ... }
    public static int CountLayers(string content) { ... }
    public static float? ExtractMaxZ(string content) { ... }
}

3.2.5. CostCalculationEngine
T o t a l C o s t = M a t e r i a l C o s t + E l e c t r i c i t y C o s t + D e p r e c i a t i o n C o s t + L a b o r C o s t + P r o f i t

public class CostCalculationInput
{
    public ParsedGcode Gcode { get; set; }
    public float FilamentPricePerKg { get; set; }
    public float ElectricityPricePerKWh { get; set; }
    public float PrinterPowerWatts { get; set; }
    public float PrinterCost { get; set; }
    public float PrinterLifetimeHours { get; set; }
    public float SetupTimeHours { get; set; }
    public float LaborRatePerHour { get; set; }
    public float ProfitMarginPercent { get; set; }
}

3.2.6. ProjectFolderProcessor

public class PrintProject
{
    public string GroupName { get; set; }
    public string ProjectName { get; set; }
    public ParsedGcode GcodeData { get; set; }
    public List<string> STLFiles { get; set; }
    public List<string> MP4Timelapses { get; set; }
    public string SourceUrl { get; set; }
}

3.2.7. Component Diagram

@startuml
package "Backend (.NET Core)" {
  [GcodeParserFactory] --> [BambuGcodeParser]
  [GcodeParserFactory] --> [OrcaGcodeParser]
  [GcodeParserFactory] --> [CrealityGcodeParser]

  [ProjectFolderProcessor] --> [GcodeParserFactory]
  [GcodeParserFactory] --> [ParsedGcode]
  [ParsedGcode] --> [CostCalculationEngine]
}

package "Frontend (Angular)" {
  [Gcode Upload UI] --> [API Controller]
  [API Controller] --> [ProjectFolderProcessor]
  [API Controller] --> [CostCalculationEngine]
}
@enduml

4. Implementation
4.1. Backend (ASP.NET Core)

    Implement models: ParsedGcode, PrintProject, CostCalculationInput

    Implement IGcodeParser for each slicer

    Register parsers and factory via DI

    Implement CostCalculationEngine and ProjectFolderProcessor

    Create REST API endpoints for file parsing, folder processing, and cost calculation

4.2. Frontend (Angular)

    Upload UI for GCODE file/folder ZIP

    Cost input UI with optional profile prefill

    Display cost breakdowns for single and batch prints

    Add project browser grouped by folders

    Show STL/MP4/URL metadata where available

5. Milestones
5.1. Milestone 1: Core Parsing + Cost Engine

    Complete core parsers (Bambu, Orca, Creality)

    File upload UI and manual cost calculator

5.2. Milestone 2: Project Folder Import

    Recursive ZIP parsing and project grouping

    Display multiple cost breakdowns

5.3. Milestone 3: Persistence Layer

    Store/load profiles and projects via EF Core

5.4. Milestone 4: Advanced Tools

    Quote exports, analytics, labor/profit inputs

5.5. Milestone 5: Polish and Release

    Full testing, styling, deployment prep

6. Gathering Results

    Validate parser correctness with real GCODEs

    Cross-check cost breakdowns against manual calculations

    Collect usability feedback from testers

    Confirm performance and parsing under batch load

    Evaluate success by user adoption and quoting use cases

